@startuml
skinparam linetype ortho

'Relationships
LibraryStorageCommon "1" *-- "1" LibraryStorageLinkedList
LibraryStorageCommon "1" *-- "1" LibraryStorageHashMap
LibraryStorageCommon ..|> LibraryStorage

'use MyHashMap
Playlist "*" --* "*" PlaylistManager
Playlist - Song
'LibraryStorage "1" -o Playlist

LibraryStorageHashMap ..|> LibraryStorage
LibraryStorageHashMap --|> MyHashMap
Song "*" o--- "1" LibraryStorageHashMap

LibraryStorageLinkedList ..|> LibraryStorage
LibraryStorageLinkedList --|> MyLinkedList
Song "*" o--- "1" LibraryStorageLinkedList

MyLinkedListIterator o- "1" MyLinkedList
MyLinkedListIterator -+ MyLinkedList
MyLinkedListIterator ..|> Iterator
MyLinkedList ..|> Iterable

Comparable <|-- Song

TitleComparator ..|> Comparator
Song - TitleComparator
ArtistComparator ..|> Comparator
Song - ArtistComparator
AlbumComparator ..|> Comparator
Song - AlbumComparator
GenreComparator ..|> Comparator
Song - GenreComparator


class Comparable<T extends Song> {
    + int compareTo(Song other)
}

interface Comparator<T extends Song> {
    + int compare(Song song1, Song song2)
}

class LibraryStorageCommon <<Proxy>> <<Singleton>>

interface LibraryStorage {
    + void add(Song song)
    + void remove(Song song)
    + Song get(int trackingNumber)
    + void update(Song song)
    + void search(int id)
    + void search(String title)
    + void search(String artist)
}

'Linked list
class LibraryStorageLinkedList

class MyLinkedList<T extends Song> {
    + MyLinkedList()
}

class MyLinkedListIterator<T>

interface Iterable<T> {
    + Iterator<T> iterator()
}

interface Iterator<T> {
    + boolean hasNext()
    + T next()
    + void remove()
}

'Hash map

class LibraryStorageHashMap

class MyHashMap<K extends int, V extends Song> {
    + MyHashMap()
}

'Song

class Song {
    - title: String
    - artist: String
    - album: String
    - genre: String
    - trackingNumber: int
    - playCount: int
    - rating: int
    + Song(String title, String artist, String album, String genre, int trackingNumber)
}

'Playlists

class Playlist {
    - library: LibraryStorage
    - queue: MyQueue<int>
    'check it exists first, then add to queue
    + add(Song song)
    + add(int trackingNumber)
    + remove(Song song)
    + get(int trackingNumber)
}
class PlaylistManager {
    - playlists: MyHashMap<String, Playlist>
}

@enduml
