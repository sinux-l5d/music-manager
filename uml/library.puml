@startuml
skinparam linetype ortho

'Relationships
LibraryStorageCommon "1" *-- "1" LibraryStorageLinkedList
LibraryStorageCommon "1" *-- "1" LibraryStorageHashMap
LibraryStorageCommon ..|> LibraryStorage

'use MyHashMap
Playlist "*" --* "1" Playlists
Playlist - Song
MyQueue "1" --o Playlist
'LibraryStorage "1" -o Playlist

LibraryStorageHashMap ..|> LibraryStorage
LibraryStorageHashMap --|> MyHashMap
MyHashMap *-- MyLinkedList
MyHashMap +-- Entry
Song "*" o--- "1" LibraryStorageHashMap

LibraryStorageLinkedList ..|> LibraryStorage
LibraryStorageLinkedList --|> MyLinkedList
Song "*" o--- "1" LibraryStorageLinkedList

MyLinkedListIterator -+ MyLinkedList
MyLinkedListIterator ..|> ListIterator
MyLinkedList ..|> Iterable
MyLinkedList +- Node
MyLinkedListIterator *- "2" Node

Comparable <|-- Song

NaturalOrderComparator ..|> Comparator
Song - NaturalOrderComparator
ArtistComparator ..|> Comparator
Song - ArtistComparator
AlbumComparator ..|> Comparator
Song - AlbumComparator
GenreComparator ..|> Comparator
Song - GenreComparator
TrackNumberComparator ..|> Comparator
Song - TrackNumberComparator



class Comparable<T extends Song> {
    + int compareTo(Song other)
}

interface Comparator<T extends Song> {
    + int compare(Song song1, Song song2)
}

class LibraryStorageCommon <<Proxy>> <<Singleton>>

interface LibraryStorage {
    + void add(Song song)
    + void remove(Song song)
    + void remove(int trackNumber)
    + Song get(int trackNumber)
    + String toString()
    + String toString(Comparator<Song> comparator)
    + int size()
    + Song[] searchByTitle(String title)
    + Song[] searchByAlbum(String title)
    + Song[] searchByArtist(String artist)
}

'Linked list
class MyLinkedList<T extends Song> {
    - Node<T> first
    - Node<T> last
    - int size
    + MyLinkedList()
    + void add(T data)
    + void addFirst(T data)
    + void add(int pos, T data)
    + T get(int pos)
    + boolean remove(T data)
    + int size()
    + T set(int pos, T data)
    + String toString()
    + Iterator<T> iterator()
}

interface Iterable<T> {
    + Iterator<T> iterator()
}

interface ListIterator<T> {
    + int nextIndex()
    + int previousIndex()
    + boolean hasNext()
    + boolean hasPrevious()
    + T next()
}

'Hash map

class LibraryStorageHashMap

class MyHashMap<K extends int, V extends Song> {
    - {static} int MAX_SLOTS = 10
    - int size
    - MyLinkedList<Entry<K, V>>[] data
    + MyHashMap(Class<K> kClass, Class<V> vClass)
    + put(K key, V value)
    + V get(K key)
    + V get(K key, V defaultValue)
    + boolean containsKey(K key)
    + K[] keySet()
    + V[] values()
    + boolean remove(K key)
    + String toString()
    + int size()
}

class Entry<K extends int, V extends Song> {
    - key: K
    - value: V
    + Entry(K key, V value)
    + K getKey()
    + V getValue()
    + V setValue(V value)
}

'Song

class Song {
    - {static} int NEXT_TRACK_NUMBER
    - title: String
    - artist: String
    - album: String
    - genre: String
    - trackNumber: int
    - playCount: int
    - rating: int
    + Song(String title, String artist, String album, String genre)
    - Song(int trackNumber, String title, String artist, String album, String genre, int playCount, float rating)
    + void incrementPlayCount()
    + int compareTo(Song other)
    + int hashCode()
    + boolean equals(Object other)
    + String toString()
    + {static} format(Song song)
    + {static} parse(String songString)
}

'Playlists

class Playlist {
    - library: LibraryStorage
    'check it exists first, then add to queue
    + add(Song song)
    + add(int trackNumber)
    + remove(Song song)
    + get(int trackNumber)
}

class Playlists {
    # playlists: MyHashMap<String, Playlist>
}

'Queue

interface MyQueue<T extends int> {
}

@enduml
